name: build

on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_Windows:        
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [ windows-latest ]

    steps:
    - uses: actions/checkout@v3
      with:
        ref: develop
        submodules: recursive

    - name: Build MeshFix
      run: |
        cmake -B build_MeshFix -S ${{github.workspace}}/submodule/MeshFix-V2.1 -DCMAKE_BUILD_TYPE="Release"
        cmake --build build_MeshFix --config "Release"
        cp ${{github.workspace}}/submodule/MeshFix-V2.1/bin64/Release/MeshFix.exe ${{github.workspace}}/plugins/Print/repairMesh/MeshFix.exe
        cp ${{github.workspace}}/submodule/MeshFix-V2.1/bin64/Release/MeshFix.exe ${{github.workspace}}/plugins/Print/repairAllMeshes/MeshFix.exe
        rm ${{github.workspace}}/submodule/MeshFix-V2.1/bin64/Release/MeshFix.exe

    - name: Bootstrap vcpkg
      run: ${{github.workspace}}/submodule/Doppelganger_Util/submodule/vcpkg/bootstrap-vcpkg.bat

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/submodule/Doppelganger_Util/submodule/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Doppelganger_TORIDE_windows
        path: |
          ${{github.workspace}}/bin
          !**/*.zip

  build_Linux:
    runs-on: [ ubuntu-latest ]

    steps:
    - uses: actions/checkout@v3
      with:
        ref: develop
        submodules: recursive

    - name: Build MeshFix
      run: sh ${{github.workspace}}/build_MeshFix.sh
        
    - name: Bootstrap vcpkg
      run: sh ${{github.workspace}}/submodule/Doppelganger_Util/submodule/vcpkg/bootstrap-vcpkg.sh

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/submodule/Doppelganger_Util/submodule/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-linux -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Doppelganger_TORIDE_Linux
        path: |
          ${{github.workspace}}/bin
          !**/*.zip

  build_macOS:
    runs-on: [ macos-latest ]

    steps:
    - uses: actions/checkout@v3
      with:
        ref: develop
        submodules: recursive

    - name: Build MeshFix
      run: sh ${{github.workspace}}/build_MeshFix.sh

    - name: Bootstrap vcpkg
      run: sh ${{github.workspace}}/submodule/Doppelganger_Util/submodule/vcpkg/bootstrap-vcpkg.sh

    - name: Copy custom triplet on macOS
      run: cp ${{github.workspace}}/x64-osx-mojave.cmake ${{github.workspace}}/submodule/Doppelganger_Util/submodule/vcpkg/triplets/x64-osx-mojave.cmake

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/submodule/Doppelganger_Util/submodule/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-osx-mojave -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Doppelganger_TORIDE_macOS
        path: |
          ${{github.workspace}}/bin
          !**/*.zip

  put_plugins_together:
    needs: [ build_Windows, build_Linux, build_macOS ]
    runs-on: [ ubuntu-latest ]

    steps:
    - name: Get plugins for Windows
      uses: actions/download-artifact@v3
      with:
        name: Doppelganger_TORIDE_windows
        path: ${{github.workspace}}/bin

    - name: Get plugins for Linux
      uses: actions/download-artifact@v3
      with:
        name: Doppelganger_TORIDE_Linux
        path: ${{github.workspace}}/bin

    - name: Get plugins for macOS
      uses: actions/download-artifact@v3
      with:
        name: Doppelganger_TORIDE_macOS
        path: ${{github.workspace}}/bin

    - name: Zip all directories
      run: find bin -maxdepth 2 -mindepth 2 -type d -execdir sh -c "cd {}; zip -r {}.zip *; mv {}.zip .." \;

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Doppelganger_TORIDE
        path: |
          ${{github.workspace}}/bin

#    - name: Test
#      working-directory: ${{github.workspace}}/build
#      # Execute tests defined by the CMake configuration.  
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}
      
